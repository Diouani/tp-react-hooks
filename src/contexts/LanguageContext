import React, { createContext, useContext, useState } from 'react';

// Dictionnaire des traductions
const translations = {
  fr: {
    loading: 'Chargement...',
    error: 'Erreur',
    price: 'Prix',
    reload: 'Recharger',
    previous: 'Précédent',
    next: 'Suivant',
    page: 'Page',
    of: 'sur',
    search: 'Rechercher...',
    noResults: 'Aucun résultat trouvé',
    products: 'Produits'
  },
  en: {
    loading: 'Loading...',
    error: 'Error',
    price: 'Price',
    reload: 'Reload',
    previous: 'Previous',
    next: 'Next',
    page: 'Page',
    of: 'of',
    search: 'Search...',
    noResults: 'No results found',
    products: 'Products'
  },
  es: {
    loading: 'Cargando...',
    error: 'Error',
    price: 'Precio',
    reload: 'Recargar',
    previous: 'Anterior',
    next: 'Siguiente',
    page: 'Página',
    of: 'de',
    search: 'Buscar...',
    noResults: 'No se encontraron resultados',
    products: 'Productos'
  }
};

// Créer le contexte
const LanguageContext = createContext();

// Provider du contexte
export const LanguageProvider = ({ children }) => {
  const [currentLanguage, setCurrentLanguage] = useState('fr');

  // Fonction pour obtenir une traduction
  const t = (key) => {
    return translations[currentLanguage]?.[key] || key;
  };

  // Fonction pour changer de langue
  const changeLanguage = (language) => {
    if (translations[language]) {
      setCurrentLanguage(language);
    }
  };

  // Obtenir les langues disponibles
  const availableLanguages = Object.keys(translations);

  const value = {
    currentLanguage,
    changeLanguage,
    t,
    availableLanguages
  };

  return (
    <LanguageContext.Provider value={value}>
      {children}
    </LanguageContext.Provider>
  );
};

// Hook personnalisé pour utiliser le contexte
export const useLanguage = () => {
  const context = useContext(LanguageContext);
  if (!context) {
    throw new Error('useLanguage doit être utilisé dans un LanguageProvider');
  }
  return context;
};

export default LanguageContext;
